/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        activate_func_layer {
            bindings = <&mo 2>;
            key-positions = <1 2>;
        };

        dot {
            bindings = <&kp PERIOD>;
            key-positions = <21 22>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <19 21 22>;
        };

        apostrophe {
            bindings = <&kp APOSTROPHE>;
            key-positions = <21 8>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <21 20>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <19 20 21>;
        };

        double_quote {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <7 21>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <31 30>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <6 7>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <18 19>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <18 19 20>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <39 7>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <39 8>;
        };

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <39 19>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <39 20>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <39 31>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <39 32>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <31 20 9>;
        };

        less {
            bindings = <&kp LESS_THAN>;
            key-positions = <41 19 8>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <19 10>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <7 20 33>;
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <7 20 39>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <6 19>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <19 8 21>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <40 19 8>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <7 33>;
        };

        exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <7 8 21>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <19 20 9>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <31 32 9>;
        };

        at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <7 20 21>;
        };

        asterisk {
            bindings = <&kp ASTERISK>;
            key-positions = <30 31 32>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <6 7 8>;
        };

        ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <18 20>;
        };

        home {
            bindings = <&kp HOME>;
            key-positions = <7 8 9>;
        };

        page_up {
            bindings = <&kp PG_UP>;
            key-positions = <18 21>;
        };

        page_down {
            bindings = <&kp PG_DN>;
            key-positions = <30 33>;
        };

        end {
            bindings = <&kp END>;
            key-positions = <8 9 10>;
        };

        insert {
            bindings = <&kp INSERT>;
            key-positions = <40 41>;
        };

        reset {
            bindings = <&kp C_RESET>;
            key-positions = <1 14 27 16 5>;
        };

        print_screen {
            bindings = <&kp PRINTSCREEN>;
            key-positions = <39 10>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <19 20>;
        };

        mute {
            bindings = <&kp C_MUTE>;
            key-positions = <40 41 39>;
        };

        activate_numb_layer {
            bindings = <&mo 1>;
            key-positions = <16 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Chordic {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp LEFT_WIN  &kp Q  &kp W  &kp E       &kp R           &kp T        &kp Y      &kp U            &kp I         &kp O     &kp P      &kp BACKSPACE
&kp LEFT_ALT  &kp A  &kp S  &kp D       &kp F           &kp G        &kp H      &kp J            &kp K         &kp UP    &kp L      &kp KP_ENTER
&kp LCTRL     &kp Z  &kp X  &kp C       &kp V           &kp B        &kp N      &kp M            &kp LEFT      &kp DOWN  &kp RIGHT  &kp DELETE
                            &kp ESCAPE  &kp LEFT_SHIFT  &kp SPACE    &kp SPACE  &kp C_VOLUME_UP  &kp C_VOL_DN
            >;
        };

        numb_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &trans
                        &trans  &trans  &trans    &trans  &kp KP_NUMBER_0  &trans
            >;
        };

        func_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
